#!aratar 0.1

## The boolean type, either true or false.
##
## Instead using conventional `&&`, `||`, and `!` operators on a boolean, use
## the following functions:
## - `all ...`
## - `not ...`
## - `any ...`
let Bool [
    False: 0
    True : 1
] let Bool

## Returns `True` only if all of the `Bool`s are `True`.
## 
## ```aratar
## assert (all Bool.True) = True
## assert (all Bool.False) = True
## assert (all Bool.True, Bool.False) = False
## assert (all Bool.False, Bool.False, Bool.False) = False
## ```
def all: [bool Bool] -> Bool {
    for i: bool {
        if i = False {
            return False
        } if
    } for i
    True
} def all

## Returns `True` only if all of the `Bool`s are `False`.
## 
## ```aratar
## assert not[Bool.True] = False
## assert not[Bool.False] = True
## assert not[Bool.True, Bool.False] = False
## assert not[Bool.False, Bool.False, Bool.False] = True
## ```
def not: [bool Bool] -> Bool {
    for i: bool {
        if i = True {
            return False
        } if
    } for i
    True
} def not

## Returns `True` if any of the `Bool`s are `True`, `False` otherwise.
##
## ```aratar
## assert (any Bool.True) = True
## assert (any Bool.False) = False
## assert (any Bool.True, Bool.False) = True
## assert (any Bool.False, Bool.False, Bool.False) = False
## ```
def any: [bool Bool] -> Bool {
    for i: bool {
        if i = True {
            return True
        } if
    } for i
    False
} def any
