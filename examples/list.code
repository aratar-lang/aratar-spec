#!aratar 0.1

## An list is like an array in C.  It can act like a python list if it's
## resizeable (it is by default, unless you don't resize it).

# A function with the same name as the file it's in acts as an entry point.
#
# Functions that have side effects must end in `!`.  Side effects are limited to
# hardware IO.
#
# Returns false on failure.
list!() -> Bool:
    "Creating 3 immutable lists (last 2 are identical)…"
    list :: [Int 0, 10]
    list :: [Int 1 2 3 4 5 6 7 8 9 10]
    list :: [Int 1 2 3 4 5 6 7 8 9 10, 10]

    info!("First element =", list[0], "…")

    info!("Printing first 5 elements…")
    list[0..5]
    list[..5]
    list[...4]
    ([1 2 3 4 5] = list[0..5])?
    ([1 2 3 4 5] = list[..5])?
    ([1 2 3 4 5] = list[...4])?

    info!("Printing last 4 elements…")
    list[6..10]
    list[-4..]
    list[6..]
    ([7 8 9 10] = list[6..10])?
    ([7 8 9 10] = list[-4..])?
    ([7 8 9 10] = list[6..])?

    info!("Printing middle 6 elements")
    list[2...7]
    list[2..8]
    ([3 4 5 6 7 8] = list[2...7])?
    ([3 4 5 6 7 8] = list[2..8])?

    info!("Adding lists together")
    ([1 2] + [3 4] = [4 6])?

    info!("Concatenating lists together")
    ([1 2] ++ [3 4] = [1 2 3 4])?
:list()
